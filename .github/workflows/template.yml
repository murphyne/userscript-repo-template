name: Template

on: push

jobs:
  job-check-template:
    runs-on: ubuntu-latest

    outputs:
      isTemplate: ${{ steps.step-check-template.outputs.isTemplate }}

    steps:
      - name: Check if template
        id: step-check-template
        run: |
          isTemplate=$(gh repo view ${{ github.repository }} --json isTemplate --jq '.isTemplate')
          echo "isTemplate=$isTemplate" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  job-materialize-template:
    runs-on: ubuntu-latest

    needs: job-check-template
    if: ${{ needs.job-check-template.outputs.isTemplate != 'true' }}

    permissions:
      contents: write

    steps:
      - name: Fetch information
        id: step-fetch-info
        uses: actions/github-script@v7
        with:
          script: |
            const query = `query($owner:String!, $name:String!) {
              repository(owner:$owner, name:$name) {
                name
                description
                url
                owner {
                  login
                  ... on User {
                    url
                  }
                  ... on Organization {
                    url
                  }
                }
              }
            }`;
            const variables = {
              owner: context.repo.owner,
              name: context.repo.repo,
            };
            const result = await github.graphql(query, variables);
            console.log(result);
            return result;

      - name: Prepare variables
        id: step-prepare-vars
        env:
          INFO: ${{ steps.step-fetch-info.outputs.result }}
        run: |
          FILTER=$(cat << EOF
          {
          name:        "\(.repository.name)",
          description: "\(.repository.description // "")",
          author:      "\(.repository.owner.login)",
          namespace:   "\(.repository.owner.url)",
          repoUrl:     "\(.repository.url)",
          repoGit:     "\(.repository.url).git",
          issuesUrl:   "\(.repository.url)/issues",
          updateUrl:   "\(.repository.url)/releases/latest/download/script.meta.js",
          downloadUrl: "\(.repository.url)/releases/latest/download/script.user.js",
          } | to_entries | map("\(.key)=\(.value)") | .[]
          EOF
          )
          echo "$INFO" | jq -c -r "$FILTER" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Checkout the project
        uses: actions/checkout@v5

      - name: Apply variables
        id: step-apply-vars
        run: |
          FILTER=$(cat << EOF
          .
          | .name           = "${{ steps.step-prepare-vars.outputs.name }}"
          | .description    = "${{ steps.step-prepare-vars.outputs.description }}"
          | .license        = ""
          | .author         = "${{ steps.step-prepare-vars.outputs.author }}"
          | .homepage       = "${{ steps.step-prepare-vars.outputs.repoUrl }}"
          | .repository.url = "${{ steps.step-prepare-vars.outputs.repoGit }}"
          | .bugs.url       = "${{ steps.step-prepare-vars.outputs.issuesUrl }}"
          EOF
          )
          cat package.json | jq "$FILTER" > package.json.tmp && mv package.json.tmp package.json

          cat rollup.conf.js \
            | sed -r "s|(@namespace ?\s+)(\S+)$|\1${{ steps.step-prepare-vars.outputs.namespace }}|" \
            | sed -r "s|(@updateUrl ?\s+)(\S+)$|\1${{ steps.step-prepare-vars.outputs.updateUrl }}|" \
            | sed -r "s|(@downloadUrl\s+)(\S+)$|\1${{ steps.step-prepare-vars.outputs.downloadUrl }}|" \
            > rollup.conf.js.tmp && mv rollup.conf.js.tmp rollup.conf.js

          git diff --compact-summary

      - name: Delete extra files
        run: |
          rm .github/workflows/template.yml
          rm .github/dependabot.yml
          rm LICENSE

          git diff --compact-summary

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v6
